c
params
c
params
c
params
c
commentable_type
n
params
c
n
commentable_type
n
params
c
comment_params
c
n
c
s
n
params
c
"#{time.strftime('%B')} #{time.strftime('%e')} at#{time.strftime('%l')}:#{time.strftime('%M')}"
"#{time.strftime('%B')} #{time.strftime('%e')} at #{time.strftime('%l')}:#{time.strftime('%M')}""#{time.strftime('%B')} #{time.strftime('%e')} at#{time.strftime('%l')}:#{time.strftime('%M')}"
"#{time.strftime('%B')} #{time.strftime('%e')} at #{time.strftime('%l')}:#{time.strftime('%M')}"
time.strftime('%B')
time.strftime('B')
time = post.created_at.localtime
time = post.created_at
post
post = user.posts.last
post
post = _
user.posts.last
user.posts
user
n
s
c
user
post.comments.to_a
post.comments
post
post = posts.first
posts = user.posts
user
user = User.find(params[:user_id])
params
current_user
user.timeline_posts.includes(:author, :profile_owner, :tagged_friends, :comments).to_a.first.author_id
user.timeline_posts.includes(:author, :profile_owner, :tagged_friends, :comments).to_a.first
user.timeline_posts.includes(:author, :profile_owner, :tagged_friends, :comments).to_a
user.timeline_posts.includes(:author, :profile_owner, :tagged_friends, :comments)
user.timeline_posts.includes(:author, :profile_owner, :tagged_friends)
user.timeline_posts.includes(:author)
user.timeline_posts
user
n
params
n
params
c
params['user']['cover_photo']c
params['user']['cover_photo']
params['cover_photo']
params[:cover_photo_url]
params[:cover_photo]
params
c
params
c
auth_hash
c
auth_hash
c
auth_hash
c
auth_hash
auth_hash.first_name
auth_hash.public_profile
auth_hash
c
auth_hash.info
auth_hash.first_name.info
auth_hash.first_name
auth_hash.name
auth_hash
c
auth_hash.info
auth_hash.name
auth_hash
c
auth_hash.info
auth_hash
request.env['omniauth.auth']
c
request.env['omniauth.auth']
request.env
c
C
c
request.env['omniauth.auth']
c
request.env['omniauth.auth']
c
request.env['omniauth.auth']
request.env
auth_hash
c
request.env['omniauth.auth']
request.env['omniauth']
request.env['omniautt']
request.env
c
auth_hash
c
n
c
"61" == 61
post_params
profile_owner_id
reload!
c
post_params
be rake db:migrate
c
reload!
u reload
reload!
Post.where('posts.author_id = 58').joins(:taggings).to_a
Post.where('posts.author_id = 58').joins(:taggings)
Post.where('posts.author_id = 58')
self.id
c
taggings
@post.taggings
@post
taggings
n
s
n
s
c
p = Post.last
c
post_params
post_parmas
c
post_params
params
c
params.require(:post).permit(:body, :taggedFriendIds => [])
params.require(:post).permit(:body, :taggedFriendIds)
params.require(:post).permit(:taggedFriendIds)
params.require(:post).permit(:body)
params.require(:post)
params
c
t.inspect
t
t = Tagging.new(tagged_id: user_id)
t
t = _
Tagging.new(tagged_id: user_id)
user_id
s
Tagging.new(tagged_id: user_id)
tagged_ids
c
params
c
n
c
self.taggings
self
c
Tagging.build
Tagging.new
c
self
self.id
c
tagged_ids
c
params
c
params.require(:post).permit(:body, :taggedFriendIds)
params.require(:post).permit(:body, :taggedFriendIds))
params.require(:post).permit(:body)
params.require(:post)
post_params
params
c
params
c
params.require(:post).permit(:body, :tagged_ids)
params.require(:post)
params
post_params
c
post_params
c
tagged_ids
self
c
self
c
post.tags = params[:taggedFriendIds]
post = current_user.posts.new(body: params[:post][:body])
params
c
quit
current_user
c
current_user.friendships
current_user
c
current_user.friendships
current_user.friends
c
current_user.friends
reload!
current_user.friends
current_user
c
current_user.friends
current_user
c
current_user.friends
current_user
c
@posts
c
@author.posts
@author
User.find(params[:user_id])
params[:user_id]
uparams
c
params
c
params
c
params
c
@users
c
@users
@useres
c
n
friend_request
c
n
